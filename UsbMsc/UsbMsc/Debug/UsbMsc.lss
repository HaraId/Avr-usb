
UsbMsc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000214  00800100  00001276  0000130a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800314  00800314  0000151e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000454b  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140a  00000000  00000000  00005cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001798  00000000  00000000  000070b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00008850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011c8  00000000  00000000  00008de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020c9  00000000  00000000  00009fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000c079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_10>
      2c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_11>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      8c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      90:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      94:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      98:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      9c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      a8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      ac:	c1 04       	cpc	r12, r1
      ae:	30 06       	cpc	r3, r16
      b0:	30 06       	cpc	r3, r16
      b2:	07 06       	cpc	r0, r23
      b4:	30 06       	cpc	r3, r16
      b6:	30 06       	cpc	r3, r16
      b8:	30 06       	cpc	r3, r16
      ba:	30 06       	cpc	r3, r16
      bc:	30 06       	cpc	r3, r16
      be:	30 06       	cpc	r3, r16
      c0:	30 06       	cpc	r3, r16
      c2:	30 06       	cpc	r3, r16
      c4:	30 06       	cpc	r3, r16
      c6:	30 06       	cpc	r3, r16
      c8:	30 06       	cpc	r3, r16
      ca:	30 06       	cpc	r3, r16
      cc:	30 06       	cpc	r3, r16
      ce:	30 06       	cpc	r3, r16
      d0:	e4 03       	fmuls	r22, r20
      d2:	30 06       	cpc	r3, r16
      d4:	30 06       	cpc	r3, r16
      d6:	30 06       	cpc	r3, r16
      d8:	30 06       	cpc	r3, r16
      da:	30 06       	cpc	r3, r16
      dc:	30 06       	cpc	r3, r16
      de:	30 06       	cpc	r3, r16
      e0:	98 04       	cpc	r9, r8
      e2:	30 06       	cpc	r3, r16
      e4:	30 06       	cpc	r3, r16
      e6:	30 06       	cpc	r3, r16
      e8:	5c 04       	cpc	r5, r12
      ea:	30 06       	cpc	r3, r16
      ec:	30 06       	cpc	r3, r16
      ee:	30 06       	cpc	r3, r16
      f0:	30 06       	cpc	r3, r16
      f2:	6f 04       	cpc	r6, r15
      f4:	30 06       	cpc	r3, r16
      f6:	33 04       	cpc	r3, r3
      f8:	30 06       	cpc	r3, r16
      fa:	30 06       	cpc	r3, r16
      fc:	dc 04       	cpc	r13, r12
      fe:	30 06       	cpc	r3, r16
     100:	65 05       	cpc	r22, r5
     102:	bf 06       	cpc	r11, r31
     104:	cd 06       	cpc	r12, r29
     106:	2f 07       	cpc	r18, r31
     108:	d9 06       	cpc	r13, r25
     10a:	2f 07       	cpc	r18, r31
     10c:	e5 06       	cpc	r14, r21
     10e:	ee 06       	cpc	r14, r30
     110:	2f 07       	cpc	r18, r31
     112:	f4 06       	cpc	r15, r20
     114:	f9 06       	cpc	r15, r25

00000116 <__ctors_start>:
     116:	61 07       	cpc	r22, r17
     118:	97 07       	cpc	r25, r23

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	da e0       	ldi	r29, 0x0A	; 10
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	13 e0       	ldi	r17, 0x03	; 3
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	e6 e7       	ldi	r30, 0x76	; 118
     12e:	f2 e1       	ldi	r31, 0x12	; 18
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 31       	cpi	r26, 0x14	; 20
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	a4 e1       	ldi	r26, 0x14	; 20
     140:	b3 e0       	ldi	r27, 0x03	; 3
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a9 32       	cpi	r26, 0x29	; 41
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	cd e8       	ldi	r28, 0x8D	; 141
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
     154:	21 97       	sbiw	r28, 0x01	; 1
     156:	fe 01       	movw	r30, r28
     158:	0e 94 33 09 	call	0x1266	; 0x1266 <__tablejump2__>
     15c:	cb 38       	cpi	r28, 0x8B	; 139
     15e:	d1 07       	cpc	r29, r17
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 65 07 	call	0xeca	; 0xeca <main>
     166:	0c 94 39 09 	jmp	0x1272	; 0x1272 <_exit>

0000016a <__bad_interrupt>:
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <_Z9sspi_initv>:



void sspi_init(void)
{
	SSPI_DDR_NAME  |= (1 << SSPI_SS) | (1 << SSPI_MOSI) | (1 << SSPI_SCLK);
     16e:	84 b1       	in	r24, 0x04	; 4
     170:	86 61       	ori	r24, 0x16	; 22
     172:	84 b9       	out	0x04, r24	; 4
	
	SSPI_PORT_NAME |= (1 << SSPI_SS) | (1 << SSPI_MOSI) | (1 << SSPI_MOSI);
     174:	85 b1       	in	r24, 0x05	; 5
     176:	84 61       	ori	r24, 0x14	; 20
     178:	85 b9       	out	0x05, r24	; 5
	
	SSPI_PORT_NAME &= ~(1 << SSPI_SCLK);
     17a:	29 98       	cbi	0x05, 1	; 5
     17c:	08 95       	ret

0000017e <_Z9sspi_sendh>:
}

void sspi_send(unsigned char byte)
{
     17e:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i = 0;
	
	for(i = 0; i < 8; ++i)
	{
		if ( byte & 0x80 )
     180:	88 23       	and	r24, r24
     182:	14 f4       	brge	.+4      	; 0x188 <_Z9sspi_sendh+0xa>
		SSPI_PORT_NAME |= (1 << SSPI_MOSI);
     184:	2a 9a       	sbi	0x05, 2	; 5
     186:	01 c0       	rjmp	.+2      	; 0x18a <_Z9sspi_sendh+0xc>
		else
		SSPI_PORT_NAME &= ~(1 << SSPI_MOSI);
     188:	2a 98       	cbi	0x05, 2	; 5
		
		SSPI_PORT_NAME |= (1 << SSPI_SCLK);
     18a:	29 9a       	sbi	0x05, 1	; 5
		asm("nop");
     18c:	00 00       	nop
		byte <<= 1;
     18e:	88 0f       	add	r24, r24
		SSPI_PORT_NAME &= ~(1 << SSPI_SCLK);
     190:	29 98       	cbi	0x05, 1	; 5
     192:	91 50       	subi	r25, 0x01	; 1

void sspi_send(unsigned char byte)
{
	unsigned char i = 0;
	
	for(i = 0; i < 8; ++i)
     194:	a9 f7       	brne	.-22     	; 0x180 <_Z9sspi_sendh+0x2>
		SSPI_PORT_NAME |= (1 << SSPI_SCLK);
		asm("nop");
		byte <<= 1;
		SSPI_PORT_NAME &= ~(1 << SSPI_SCLK);
	}
}
     196:	08 95       	ret

00000198 <_Z9sspi_recvv>:

unsigned char sspi_recv()
{
     198:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i, result = 0;
     19a:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i = 0; i < 8; ++i)
	{
		SSPI_PORT_NAME |= (1 << SSPI_SCLK);
     19c:	29 9a       	sbi	0x05, 1	; 5
		
		result <<= 1;
     19e:	88 0f       	add	r24, r24
		if ( SSPI_PIN_NAME & (1 << SSPI_MISO) )
     1a0:	1b 99       	sbic	0x03, 3	; 3
		result |= 1;
     1a2:	81 60       	ori	r24, 0x01	; 1

		asm("nop");
     1a4:	00 00       	nop
		SSPI_PORT_NAME &= ~(1 << SSPI_SCLK);
     1a6:	29 98       	cbi	0x05, 1	; 5
		asm("nop");
     1a8:	00 00       	nop
     1aa:	91 50       	subi	r25, 0x01	; 1

unsigned char sspi_recv()
{
	unsigned char i, result = 0;
	
	for(i = 0; i < 8; ++i)
     1ac:	b9 f7       	brne	.-18     	; 0x19c <_Z9sspi_recvv+0x4>
		SSPI_PORT_NAME &= ~(1 << SSPI_SCLK);
		asm("nop");
	}
	
	return result;
}
     1ae:	08 95       	ret

000001b0 <_Z13usb_core_initv>:
	char hh[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

	ans[1] = hh[data%16];
	ans[0] = hh[data/16];
	return CDC_Send_Data(ans, 2);
     1b0:	f8 94       	cli
     1b2:	e7 ed       	ldi	r30, 0xD7	; 215
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	80 83       	st	Z, r24
     1bc:	80 ea       	ldi	r24, 0xA0	; 160
     1be:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     1c2:	89 b5       	in	r24, 0x29	; 41
     1c4:	80 61       	ori	r24, 0x10	; 16
     1c6:	89 bd       	out	0x29, r24	; 41
     1c8:	89 b5       	in	r24, 0x29	; 41
     1ca:	82 60       	ori	r24, 0x02	; 2
     1cc:	89 bd       	out	0x29, r24	; 41
     1ce:	09 b4       	in	r0, 0x29	; 41
     1d0:	00 fe       	sbrs	r0, 0
     1d2:	fd cf       	rjmp	.-6      	; 0x1ce <_Z13usb_core_initv+0x1e>
     1d4:	8f e9       	ldi	r24, 0x9F	; 159
     1d6:	9f e0       	ldi	r25, 0x0F	; 15
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z13usb_core_initv+0x28>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z13usb_core_initv+0x2e>
     1de:	00 00       	nop
     1e0:	e8 ed       	ldi	r30, 0xD8	; 216
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7c       	andi	r24, 0xCF	; 207
     1e8:	80 61       	ori	r24, 0x10	; 16
     1ea:	80 83       	st	Z, r24
     1ec:	e0 ee       	ldi	r30, 0xE0	; 224
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	80 7f       	andi	r24, 0xF0	; 240
     1f4:	80 83       	st	Z, r24
     1f6:	e1 ee       	ldi	r30, 0xE1	; 225
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	8e 7e       	andi	r24, 0xEE	; 238
     1fe:	80 83       	st	Z, r24
     200:	8d e0       	ldi	r24, 0x0D	; 13
     202:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     206:	78 94       	sei
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	08 95       	ret

0000020c <_Z22ReceivedSetupInterruptv>:
     20c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     210:	83 fb       	bst	r24, 3
     212:	88 27       	eor	r24, r24
     214:	80 f9       	bld	r24, 0
     216:	08 95       	ret

00000218 <_Z18InitializeEndpointccc>:
     218:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
     222:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     226:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     22a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     22e:	88 1f       	adc	r24, r24
     230:	88 27       	eor	r24, r24
     232:	88 1f       	adc	r24, r24
     234:	08 95       	ret

00000236 <__vector_10>:
     236:	1f 92       	push	r1
     238:	0f 92       	push	r0
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	0f 92       	push	r0
     23e:	11 24       	eor	r1, r1
     240:	2f 93       	push	r18
     242:	3f 93       	push	r19
     244:	4f 93       	push	r20
     246:	5f 93       	push	r21
     248:	6f 93       	push	r22
     24a:	7f 93       	push	r23
     24c:	8f 93       	push	r24
     24e:	9f 93       	push	r25
     250:	af 93       	push	r26
     252:	bf 93       	push	r27
     254:	ef 93       	push	r30
     256:	ff 93       	push	r31
     258:	e1 ee       	ldi	r30, 0xE1	; 225
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	90 81       	ld	r25, Z
     25e:	80 81       	ld	r24, Z
     260:	83 7f       	andi	r24, 0xF3	; 243
     262:	80 83       	st	Z, r24
     264:	93 ff       	sbrs	r25, 3
     266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_10+0x42>
     268:	42 e3       	ldi	r20, 0x32	; 50
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 0c 01 	call	0x218	; 0x218 <_Z18InitializeEndpointccc>
     272:	88 e0       	ldi	r24, 0x08	; 8
     274:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	7f 91       	pop	r23
     286:	6f 91       	pop	r22
     288:	5f 91       	pop	r21
     28a:	4f 91       	pop	r20
     28c:	3f 91       	pop	r19
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <_Z8ReadDataPVcc>:
     29a:	fc 01       	movw	r30, r24
     29c:	9f ef       	ldi	r25, 0xFF	; 255
     29e:	96 0f       	add	r25, r22
     2a0:	66 23       	and	r22, r22
     2a2:	41 f0       	breq	.+16     	; 0x2b4 <_Z8ReadDataPVcc+0x1a>
     2a4:	a1 ef       	ldi	r26, 0xF1	; 241
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	8c 91       	ld	r24, X
     2aa:	80 83       	st	Z, r24
     2ac:	91 50       	subi	r25, 0x01	; 1
     2ae:	31 96       	adiw	r30, 0x01	; 1
     2b0:	9f 3f       	cpi	r25, 0xFF	; 255
     2b2:	d1 f7       	brne	.-12     	; 0x2a8 <_Z8ReadDataPVcc+0xe>
     2b4:	08 95       	ret

000002b6 <_Z11WaitInTokenv>:
     2b6:	e8 ee       	ldi	r30, 0xE8	; 232
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	80 ff       	sbrs	r24, 0
     2be:	fd cf       	rjmp	.-6      	; 0x2ba <_Z11WaitInTokenv+0x4>
     2c0:	08 95       	ret

000002c2 <_Z12WaitOutTokenv>:
     2c2:	e8 ee       	ldi	r30, 0xE8	; 232
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	82 ff       	sbrs	r24, 2
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_Z12WaitOutTokenv+0x4>
     2cc:	08 95       	ret

000002ce <_Z9WaitINOUTv>:
     2ce:	e8 ee       	ldi	r30, 0xE8	; 232
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	85 70       	andi	r24, 0x05	; 5
     2d6:	e9 f3       	breq	.-6      	; 0x2d2 <_Z9WaitINOUTv+0x4>
     2d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     2dc:	82 fb       	bst	r24, 2
     2de:	88 27       	eor	r24, r24
     2e0:	80 f9       	bld	r24, 0
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	89 27       	eor	r24, r25
     2e6:	08 95       	ret

000002e8 <_Z19InitControlTransfers>:
     2e8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     2ec:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_ZL6_cmark+0x1>
     2f0:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZL6_cmark>
     2f4:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__data_end+0x1>
     2f8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__data_end>
     2fc:	08 95       	ret

000002fe <_Z19SendControlTransferc>:
     2fe:	cf 93       	push	r28
     300:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <_ZL6_cmark>
     304:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <_ZL6_cmark+0x1>
     308:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__data_end>
     30c:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__data_end+0x1>
     310:	42 17       	cp	r20, r18
     312:	53 07       	cpc	r21, r19
     314:	9c f4       	brge	.+38     	; 0x33c <_Z19SendControlTransferc+0x3e>
     316:	c8 2f       	mov	r28, r24
     318:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z9WaitINOUTv>
     31c:	88 23       	and	r24, r24
     31e:	c1 f0       	breq	.+48     	; 0x350 <_Z19SendControlTransferc+0x52>
     320:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     324:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL6_cmark>
     328:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL6_cmark+0x1>
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	8f 73       	andi	r24, 0x3F	; 63
     330:	99 27       	eor	r25, r25
     332:	89 2b       	or	r24, r25
     334:	19 f4       	brne	.+6      	; 0x33c <_Z19SendControlTransferc+0x3e>
     336:	8e ef       	ldi	r24, 0xFE	; 254
     338:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     33c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZL6_cmark>
     340:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZL6_cmark+0x1>
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZL6_cmark+0x1>
     34a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZL6_cmark>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <_Z22USBSendControlTransfercPKcs>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <_ZL6_cmark>
     360:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <_ZL6_cmark+0x1>
     364:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end>
     368:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__data_end+0x1>
     36c:	28 17       	cp	r18, r24
     36e:	39 07       	cpc	r19, r25
     370:	6c f4       	brge	.+26     	; 0x38c <_Z22USBSendControlTransfercPKcs+0x38>
     372:	8b 01       	movw	r16, r22
     374:	eb 01       	movw	r28, r22
     376:	04 0f       	add	r16, r20
     378:	15 1f       	adc	r17, r21
     37a:	c0 17       	cp	r28, r16
     37c:	d1 07       	cpc	r29, r17
     37e:	41 f0       	breq	.+16     	; 0x390 <_Z22USBSendControlTransfercPKcs+0x3c>
     380:	89 91       	ld	r24, Y+
     382:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z19SendControlTransferc>
     386:	81 11       	cpse	r24, r1
     388:	f8 cf       	rjmp	.-16     	; 0x37a <_Z22USBSendControlTransfercPKcs+0x26>
     38a:	03 c0       	rjmp	.+6      	; 0x392 <_Z22USBSendControlTransfercPKcs+0x3e>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <_Z22USBSendControlTransfercPKcs+0x3e>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <_Z14SendDescriptorP8USBSetup>:
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
     3aa:	1b 81       	ldd	r17, Y+3	; 0x03
     3ac:	8e 81       	ldd	r24, Y+6	; 0x06
     3ae:	9f 81       	ldd	r25, Y+7	; 0x07
     3b0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z19InitControlTransfers>
     3b4:	12 30       	cpi	r17, 0x02	; 2
     3b6:	71 f0       	breq	.+28     	; 0x3d4 <_Z14SendDescriptorP8USBSetup+0x38>
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	e1 f0       	breq	.+56     	; 0x3f4 <_Z14SendDescriptorP8USBSetup+0x58>
     3bc:	11 30       	cpi	r17, 0x01	; 1
     3be:	09 f0       	breq	.+2      	; 0x3c2 <_Z14SendDescriptorP8USBSetup+0x26>
     3c0:	55 c0       	rjmp	.+170    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     3c2:	42 e1       	ldi	r20, 0x12	; 18
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	6b e0       	ldi	r22, 0x0B	; 11
     3c8:	72 e0       	ldi	r23, 0x02	; 2
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22USBSendControlTransfercPKcs>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	51 c0       	rjmp	.+162    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3d4:	49 e0       	ldi	r20, 0x09	; 9
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	6d e1       	ldi	r22, 0x1D	; 29
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22USBSendControlTransfercPKcs>
     3e2:	41 e6       	ldi	r20, 0x61	; 97
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	66 e2       	ldi	r22, 0x26	; 38
     3e8:	72 e0       	ldi	r23, 0x02	; 2
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22USBSendControlTransfercPKcs>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	41 c0       	rjmp	.+130    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3f4:	ca 81       	ldd	r28, Y+2	; 0x02
     3f6:	cc 23       	and	r28, r28
     3f8:	81 f1       	breq	.+96     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3fa:	c4 30       	cpi	r28, 0x04	; 4
     3fc:	c8 f5       	brcc	.+114    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3fe:	20 e1       	ldi	r18, 0x10	; 16
     400:	c2 9f       	mul	r28, r18
     402:	f0 01       	movw	r30, r0
     404:	11 24       	eor	r1, r1
     406:	e9 53       	subi	r30, 0x39	; 57
     408:	fe 4f       	sbci	r31, 0xFE	; 254
     40a:	d0 81       	ld	r29, Z
     40c:	8d 2f       	mov	r24, r29
     40e:	88 0f       	add	r24, r24
     410:	8e 5f       	subi	r24, 0xFE	; 254
     412:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z19SendControlTransferc>
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z19SendControlTransferc>
     41c:	dd 23       	and	r29, r29
     41e:	51 f1       	breq	.+84     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     420:	30 e1       	ldi	r19, 0x10	; 16
     422:	c3 9f       	mul	r28, r19
     424:	c0 01       	movw	r24, r0
     426:	11 24       	eor	r1, r1
     428:	8c 01       	movw	r16, r24
     42a:	08 53       	subi	r16, 0x38	; 56
     42c:	1e 4f       	sbci	r17, 0xFE	; 254
     42e:	d1 50       	subi	r29, 0x01	; 1
     430:	8d 0f       	add	r24, r29
     432:	91 1d       	adc	r25, r1
     434:	fc 01       	movw	r30, r24
     436:	e7 53       	subi	r30, 0x37	; 55
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	7f 01       	movw	r14, r30
     43c:	f8 01       	movw	r30, r16
     43e:	81 91       	ld	r24, Z+
     440:	8f 01       	movw	r16, r30
     442:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z19SendControlTransferc>
     446:	c8 2f       	mov	r28, r24
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z19SendControlTransferc>
     44e:	8c 23       	and	r24, r28
     450:	91 f0       	breq	.+36     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     452:	0e 15       	cp	r16, r14
     454:	1f 05       	cpc	r17, r15
     456:	91 f7       	brne	.-28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     458:	0e c0       	rjmp	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     45a:	44 e0       	ldi	r20, 0x04	; 4
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	67 e0       	ldi	r22, 0x07	; 7
     460:	72 e0       	ldi	r23, 0x02	; 2
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22USBSendControlTransfercPKcs>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	05 c0       	rjmp	.+10     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	03 c0       	rjmp	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	01 c0       	rjmp	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <_Z22USBRecvControlTransferPcs>:
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	8c 01       	movw	r16, r24
     498:	eb 01       	movw	r28, r22
     49a:	1c 16       	cp	r1, r28
     49c:	1d 06       	cpc	r1, r29
     49e:	2c f5       	brge	.+74     	; 0x4ea <_Z22USBRecvControlTransferPcs+0x66>
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f8 ee       	ldi	r31, 0xE8	; 232
     4a4:	af 2e       	mov	r10, r31
     4a6:	b1 2c       	mov	r11, r1
     4a8:	f0 2d       	mov	r31, r0
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fb ef       	ldi	r31, 0xFB	; 251
     4ae:	df 2e       	mov	r13, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	c1 34       	cpi	r28, 0x41	; 65
     4b4:	d1 05       	cpc	r29, r1
     4b6:	3c f0       	brlt	.+14     	; 0x4c6 <_Z22USBRecvControlTransferPcs+0x42>
     4b8:	c0 54       	subi	r28, 0x40	; 64
     4ba:	d1 09       	sbc	r29, r1
     4bc:	68 94       	set
     4be:	ee 24       	eor	r14, r14
     4c0:	e6 f8       	bld	r14, 6
     4c2:	f1 2c       	mov	r15, r1
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <_Z22USBRecvControlTransferPcs+0x44>
     4c6:	7e 01       	movw	r14, r28
     4c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z9WaitINOUTv>
     4cc:	81 11       	cpse	r24, r1
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <_Z22USBRecvControlTransferPcs+0x6a>
     4d0:	6e 2d       	mov	r22, r14
     4d2:	c8 01       	movw	r24, r16
     4d4:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z8ReadDataPVcc>
     4d8:	f5 01       	movw	r30, r10
     4da:	d0 82       	st	Z, r13
     4dc:	0e 0d       	add	r16, r14
     4de:	1f 1d       	adc	r17, r15
     4e0:	1c 16       	cp	r1, r28
     4e2:	1d 06       	cpc	r1, r29
     4e4:	34 f3       	brlt	.-52     	; 0x4b2 <_Z22USBRecvControlTransferPcs+0x2e>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <_Z22USBRecvControlTransferPcs+0x6c>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <_Z22USBRecvControlTransferPcs+0x6c>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	08 95       	ret

00000504 <_Z19ClassControlRequestP8USBSetup>:
     504:	fc 01       	movw	r30, r24
     506:	24 81       	ldd	r18, Z+4	; 0x04
     508:	21 11       	cpse	r18, r1
     50a:	64 c0       	rjmp	.+200    	; 0x5d4 <_Z19ClassControlRequestP8USBSetup+0xd0>
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	80 81       	ld	r24, Z
     510:	81 3a       	cpi	r24, 0xA1	; 161
     512:	59 f4       	brne	.+22     	; 0x52a <_Z19ClassControlRequestP8USBSetup+0x26>
     514:	91 32       	cpi	r25, 0x21	; 33
     516:	09 f0       	breq	.+2      	; 0x51a <_Z19ClassControlRequestP8USBSetup+0x16>
     518:	63 c0       	rjmp	.+198    	; 0x5e0 <_Z19ClassControlRequestP8USBSetup+0xdc>
     51a:	47 e0       	ldi	r20, 0x07	; 7
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	6e e1       	ldi	r22, 0x1E	; 30
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 aa 01 	call	0x354	; 0x354 <_Z22USBSendControlTransfercPKcs>
     528:	5b c0       	rjmp	.+182    	; 0x5e0 <_Z19ClassControlRequestP8USBSetup+0xdc>
     52a:	81 32       	cpi	r24, 0x21	; 33
     52c:	09 f0       	breq	.+2      	; 0x530 <_Z19ClassControlRequestP8USBSetup+0x2c>
     52e:	54 c0       	rjmp	.+168    	; 0x5d8 <_Z19ClassControlRequestP8USBSetup+0xd4>
     530:	90 32       	cpi	r25, 0x20	; 32
     532:	41 f4       	brne	.+16     	; 0x544 <_Z19ClassControlRequestP8USBSetup+0x40>
     534:	67 e0       	ldi	r22, 0x07	; 7
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8e e1       	ldi	r24, 0x1E	; 30
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 42 02 	call	0x484	; 0x484 <_Z22USBRecvControlTransferPcs>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 95       	ret
     544:	93 32       	cpi	r25, 0x23	; 35
     546:	61 f4       	brne	.+24     	; 0x560 <_Z19ClassControlRequestP8USBSetup+0x5c>
     548:	83 81       	ldd	r24, Z+3	; 0x03
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	98 2f       	mov	r25, r24
     54e:	88 27       	eor	r24, r24
     550:	22 81       	ldd	r18, Z+2	; 0x02
     552:	82 2b       	or	r24, r18
     554:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <_ZL14_cdcBreakValue+0x1>
     558:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZL14_cdcBreakValue>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	08 95       	ret
     560:	92 32       	cpi	r25, 0x22	; 34
     562:	e1 f5       	brne	.+120    	; 0x5dc <_Z19ClassControlRequestP8USBSetup+0xd8>
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	ee e1       	ldi	r30, 0x1E	; 30
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	87 83       	std	Z+7, r24	; 0x07
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	a2 81       	ldd	r26, Z+2	; 0x02
     572:	b3 81       	ldd	r27, Z+3	; 0x03
     574:	80 34       	cpi	r24, 0x40	; 64
     576:	98 43       	sbci	r25, 0x38	; 56
     578:	a1 05       	cpc	r26, r1
     57a:	b1 05       	cpc	r27, r1
     57c:	d1 f5       	brne	.+116    	; 0x5f2 <_Z19ClassControlRequestP8USBSetup+0xee>
     57e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_ZL12_usbLineInfo+0x7>
     582:	80 ff       	sbrs	r24, 0
     584:	2f c0       	rjmp	.+94     	; 0x5e4 <_Z19ClassControlRequestP8USBSetup+0xe0>
     586:	35 c0       	rjmp	.+106    	; 0x5f2 <_Z19ClassControlRequestP8USBSetup+0xee>
     588:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_ZL12_usbLineInfo+0x7>
     58c:	80 ff       	sbrs	r24, 0
     58e:	3f c0       	rjmp	.+126    	; 0x60e <_Z19ClassControlRequestP8USBSetup+0x10a>
     590:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL12_usbLineInfo>
     594:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <_ZL12_usbLineInfo+0x1>
     598:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <_ZL12_usbLineInfo+0x2>
     59c:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <_ZL12_usbLineInfo+0x3>
     5a0:	80 3b       	cpi	r24, 0xB0	; 176
     5a2:	94 40       	sbci	r25, 0x04	; 4
     5a4:	a1 05       	cpc	r26, r1
     5a6:	b1 05       	cpc	r27, r1
     5a8:	09 f0       	breq	.+2      	; 0x5ac <_Z19ClassControlRequestP8USBSetup+0xa8>
     5aa:	64 c0       	rjmp	.+200    	; 0x674 <_Z19ClassControlRequestP8USBSetup+0x170>
     5ac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_ZL12_usbLineInfo+0x7>
     5b0:	80 ff       	sbrs	r24, 0
     5b2:	46 c0       	rjmp	.+140    	; 0x640 <_Z19ClassControlRequestP8USBSetup+0x13c>
     5b4:	5f c0       	rjmp	.+190    	; 0x674 <_Z19ClassControlRequestP8USBSetup+0x170>
     5b6:	a8 95       	wdr
     5b8:	e0 e6       	ldi	r30, 0x60	; 96
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 61       	ori	r24, 0x18	; 24
     5c0:	80 83       	st	Z, r24
     5c2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZL11wdtcsr_save>
     5c6:	80 83       	st	Z, r24
     5c8:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x7d6>
     5cc:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x7d5>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	08 95       	ret
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	08 95       	ret
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	08 95       	ret
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	08 95       	ret
     5e4:	26 9a       	sbi	0x04, 6	; 4
     5e6:	95 b1       	in	r25, 0x05	; 5
     5e8:	80 e4       	ldi	r24, 0x40	; 64
     5ea:	89 27       	eor	r24, r25
     5ec:	85 b9       	out	0x05, r24	; 5
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret
     5f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL12_usbLineInfo>
     5f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <_ZL12_usbLineInfo+0x1>
     5fa:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <_ZL12_usbLineInfo+0x2>
     5fe:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <_ZL12_usbLineInfo+0x3>
     602:	80 3b       	cpi	r24, 0xB0	; 176
     604:	94 40       	sbci	r25, 0x04	; 4
     606:	a1 05       	cpc	r26, r1
     608:	b1 05       	cpc	r27, r1
     60a:	11 f6       	brne	.-124    	; 0x590 <_Z19ClassControlRequestP8USBSetup+0x8c>
     60c:	bd cf       	rjmp	.-134    	; 0x588 <_Z19ClassControlRequestP8USBSetup+0x84>
     60e:	87 e7       	ldi	r24, 0x77	; 119
     610:	97 e7       	ldi	r25, 0x77	; 119
     612:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x7d6>
     616:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x7d5>
     61a:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__bss_end+0x4d8>
     61e:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__bss_end+0x4d7>
     622:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     626:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZL11wdtcsr_save>
     62a:	9b e0       	ldi	r25, 0x0B	; 11
     62c:	88 e1       	ldi	r24, 0x18	; 24
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	a8 95       	wdr
     634:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     638:	0f be       	out	0x3f, r0	; 63
     63a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     63e:	a8 cf       	rjmp	.-176    	; 0x590 <_Z19ClassControlRequestP8USBSetup+0x8c>
     640:	87 e7       	ldi	r24, 0x77	; 119
     642:	97 e7       	ldi	r25, 0x77	; 119
     644:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x7d6>
     648:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x7d5>
     64c:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__bss_end+0x4d8>
     650:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__bss_end+0x4d7>
     654:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     658:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZL11wdtcsr_save>
     65c:	9b e0       	ldi	r25, 0x0B	; 11
     65e:	88 e1       	ldi	r24, 0x18	; 24
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	a8 95       	wdr
     666:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	08 95       	ret
     674:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x7d5>
     678:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x7d6>
     67c:	87 37       	cpi	r24, 0x77	; 119
     67e:	97 47       	sbci	r25, 0x77	; 119
     680:	09 f4       	brne	.+2      	; 0x684 <_Z19ClassControlRequestP8USBSetup+0x180>
     682:	99 cf       	rjmp	.-206    	; 0x5b6 <_Z19ClassControlRequestP8USBSetup+0xb2>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	08 95       	ret

00000688 <_Z7SendUsbcPKcs>:
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	a1 ef       	ldi	r26, 0xF1	; 241
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	c8 ee       	ldi	r28, 0xE8	; 232
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	1a e3       	ldi	r17, 0x3A	; 58
     6a2:	ff 24       	eor	r15, r15
     6a4:	f3 94       	inc	r15
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	14 16       	cp	r1, r20
     6aa:	15 06       	cpc	r1, r21
     6ac:	14 f0       	brlt	.+4      	; 0x6b2 <_Z7SendUsbcPKcs+0x2a>
     6ae:	33 23       	and	r19, r19
     6b0:	61 f1       	breq	.+88     	; 0x70a <_Z7SendUsbcPKcs+0x82>
     6b2:	40 34       	cpi	r20, 0x40	; 64
     6b4:	51 05       	cpc	r21, r1
     6b6:	2c f5       	brge	.+74     	; 0x702 <_Z7SendUsbcPKcs+0x7a>
     6b8:	84 2f       	mov	r24, r20
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	24 0f       	add	r18, r20
     6be:	44 27       	eor	r20, r20
     6c0:	88 23       	and	r24, r24
     6c2:	59 f0       	breq	.+22     	; 0x6da <_Z7SendUsbcPKcs+0x52>
     6c4:	fb 01       	movw	r30, r22
     6c6:	82 2f       	mov	r24, r18
     6c8:	91 91       	ld	r25, Z+
     6ca:	9c 93       	st	X, r25
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	e0 f7       	brcc	.-8      	; 0x6c8 <_Z7SendUsbcPKcs+0x40>
     6d0:	82 2f       	mov	r24, r18
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	68 0f       	add	r22, r24
     6d8:	79 1f       	adc	r23, r25
     6da:	33 23       	and	r19, r19
     6dc:	19 f0       	breq	.+6      	; 0x6e4 <_Z7SendUsbcPKcs+0x5c>
     6de:	18 83       	st	Y, r17
     6e0:	30 2f       	mov	r19, r16
     6e2:	e2 cf       	rjmp	.-60     	; 0x6a8 <_Z7SendUsbcPKcs+0x20>
     6e4:	88 81       	ld	r24, Y
     6e6:	85 fd       	sbrc	r24, 5
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <_Z7SendUsbcPKcs+0x70>
     6ea:	18 83       	st	Y, r17
     6ec:	3f 2d       	mov	r19, r15
     6ee:	41 15       	cp	r20, r1
     6f0:	51 05       	cpc	r21, r1
     6f2:	d1 f2       	breq	.-76     	; 0x6a8 <_Z7SendUsbcPKcs+0x20>
     6f4:	30 2f       	mov	r19, r16
     6f6:	d8 cf       	rjmp	.-80     	; 0x6a8 <_Z7SendUsbcPKcs+0x20>
     6f8:	41 15       	cp	r20, r1
     6fa:	51 05       	cpc	r21, r1
     6fc:	a9 f6       	brne	.-86     	; 0x6a8 <_Z7SendUsbcPKcs+0x20>
     6fe:	18 83       	st	Y, r17
     700:	d3 cf       	rjmp	.-90     	; 0x6a8 <_Z7SendUsbcPKcs+0x20>
     702:	40 54       	subi	r20, 0x40	; 64
     704:	51 09       	sbc	r21, r1
     706:	2f e3       	ldi	r18, 0x3F	; 63
     708:	dd cf       	rjmp	.-70     	; 0x6c4 <_Z7SendUsbcPKcs+0x3c>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	08 95       	ret

00000718 <_Z12SCSI_Executev>:
     718:	4f 92       	push	r4
     71a:	5f 92       	push	r5
     71c:	6f 92       	push	r6
     71e:	7f 92       	push	r7
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	cc 52       	subi	r28, 0x2C	; 44
     73e:	d2 40       	sbci	r29, 0x02	; 2
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	fe 01       	movw	r30, r28
     74c:	b0 96       	adiw	r30, 0x20	; 32
     74e:	8d e0       	ldi	r24, 0x0D	; 13
     750:	df 01       	movw	r26, r30
     752:	1d 92       	st	X+, r1
     754:	8a 95       	dec	r24
     756:	e9 f7       	brne	.-6      	; 0x752 <_Z12SCSI_Executev+0x3a>
     758:	85 e5       	ldi	r24, 0x55	; 85
     75a:	93 e5       	ldi	r25, 0x53	; 83
     75c:	a2 e4       	ldi	r26, 0x42	; 66
     75e:	b3 e5       	ldi	r27, 0x53	; 83
     760:	88 a3       	std	Y+32, r24	; 0x20
     762:	99 a3       	std	Y+33, r25	; 0x21
     764:	aa a3       	std	Y+34, r26	; 0x22
     766:	bb a3       	std	Y+35, r27	; 0x23
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	0e 94 24 09 	call	0x1248	; 0x1248 <_Z19debug_usb_interrupth>
     76e:	6f e1       	ldi	r22, 0x1F	; 31
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z8ReadDataPVcc>
     778:	88 89       	ldd	r24, Y+16	; 0x10
     77a:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
     77e:	8b e6       	ldi	r24, 0x6B	; 107
     780:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	ab 81       	ldd	r26, Y+3	; 0x03
     78a:	bc 81       	ldd	r27, Y+4	; 0x04
     78c:	85 35       	cpi	r24, 0x55	; 85
     78e:	93 45       	sbci	r25, 0x53	; 83
     790:	a2 44       	sbci	r26, 0x42	; 66
     792:	b3 44       	sbci	r27, 0x43	; 67
     794:	29 f0       	breq	.+10     	; 0x7a0 <_Z12SCSI_Executev+0x88>
     796:	86 e2       	ldi	r24, 0x26	; 38
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     79e:	83 c2       	rjmp	.+1286   	; 0xca6 <__stack+0x1a7>
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	af 81       	ldd	r26, Y+7	; 0x07
     7a6:	b8 85       	ldd	r27, Y+8	; 0x08
     7a8:	8c a3       	std	Y+36, r24	; 0x24
     7aa:	9d a3       	std	Y+37, r25	; 0x25
     7ac:	ae a3       	std	Y+38, r26	; 0x26
     7ae:	bf a3       	std	Y+39, r27	; 0x27
     7b0:	e8 89       	ldd	r30, Y+16	; 0x10
     7b2:	8e 2f       	mov	r24, r30
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	8b 32       	cpi	r24, 0x2B	; 43
     7b8:	91 05       	cpc	r25, r1
     7ba:	08 f0       	brcs	.+2      	; 0x7be <_Z12SCSI_Executev+0xa6>
     7bc:	51 c2       	rjmp	.+1186   	; 0xc60 <__stack+0x161>
     7be:	fc 01       	movw	r30, r24
     7c0:	ea 5a       	subi	r30, 0xAA	; 170
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__tablejump2__>
     7c8:	89 89       	ldd	r24, Y+17	; 0x11
     7ca:	81 11       	cpse	r24, r1
     7cc:	29 c0       	rjmp	.+82     	; 0x820 <_Z12SCSI_Executev+0x108>
     7ce:	8a e2       	ldi	r24, 0x2A	; 42
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     7d6:	85 e0       	ldi	r24, 0x05	; 5
     7d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     7dc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     7e0:	4c 89       	ldd	r20, Y+20	; 0x14
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	6c e9       	ldi	r22, 0x9C	; 156
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     7ee:	2c 89       	ldd	r18, Y+20	; 0x14
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	ab 85       	ldd	r26, Y+11	; 0x0b
     7f6:	bc 85       	ldd	r27, Y+12	; 0x0c
     7f8:	82 1b       	sub	r24, r18
     7fa:	91 09       	sbc	r25, r1
     7fc:	a1 09       	sbc	r26, r1
     7fe:	b1 09       	sbc	r27, r1
     800:	88 a7       	std	Y+40, r24	; 0x28
     802:	99 a7       	std	Y+41, r25	; 0x29
     804:	aa a7       	std	Y+42, r26	; 0x2a
     806:	bb a7       	std	Y+43, r27	; 0x2b
     808:	1c a6       	std	Y+44, r1	; 0x2c
     80a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     80e:	4d e0       	ldi	r20, 0x0D	; 13
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	be 01       	movw	r22, r28
     814:	60 5e       	subi	r22, 0xE0	; 224
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     81e:	43 c2       	rjmp	.+1158   	; 0xca6 <__stack+0x1a7>
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     826:	89 85       	ldd	r24, Y+9	; 0x09
     828:	9a 85       	ldd	r25, Y+10	; 0x0a
     82a:	ab 85       	ldd	r26, Y+11	; 0x0b
     82c:	bc 85       	ldd	r27, Y+12	; 0x0c
     82e:	88 a7       	std	Y+40, r24	; 0x28
     830:	99 a7       	std	Y+41, r25	; 0x29
     832:	aa a7       	std	Y+42, r26	; 0x2a
     834:	bb a7       	std	Y+43, r27	; 0x2b
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	8c a7       	std	Y+44, r24	; 0x2c
     83a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     83e:	4d e0       	ldi	r20, 0x0D	; 13
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	be 01       	movw	r22, r28
     844:	60 5e       	subi	r22, 0xE0	; 224
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     84e:	1c a6       	std	Y+44, r1	; 0x2c
     850:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     854:	4d e0       	ldi	r20, 0x0D	; 13
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	be 01       	movw	r22, r28
     85a:	60 5e       	subi	r22, 0xE0	; 224
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     864:	20 c2       	rjmp	.+1088   	; 0xca6 <__stack+0x1a7>
     866:	8f e2       	ldi	r24, 0x2F	; 47
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     874:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     878:	48 e0       	ldi	r20, 0x08	; 8
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	64 e0       	ldi	r22, 0x04	; 4
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     886:	2c 89       	ldd	r18, Y+20	; 0x14
     888:	89 85       	ldd	r24, Y+9	; 0x09
     88a:	9a 85       	ldd	r25, Y+10	; 0x0a
     88c:	ab 85       	ldd	r26, Y+11	; 0x0b
     88e:	bc 85       	ldd	r27, Y+12	; 0x0c
     890:	82 1b       	sub	r24, r18
     892:	91 09       	sbc	r25, r1
     894:	a1 09       	sbc	r26, r1
     896:	b1 09       	sbc	r27, r1
     898:	88 a7       	std	Y+40, r24	; 0x28
     89a:	99 a7       	std	Y+41, r25	; 0x29
     89c:	aa a7       	std	Y+42, r26	; 0x2a
     89e:	bb a7       	std	Y+43, r27	; 0x2b
     8a0:	1c a6       	std	Y+44, r1	; 0x2c
     8a2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     8a6:	4d e0       	ldi	r20, 0x0D	; 13
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	be 01       	movw	r22, r28
     8ac:	60 5e       	subi	r22, 0xE0	; 224
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	85 e0       	ldi	r24, 0x05	; 5
     8b2:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     8b6:	f7 c1       	rjmp	.+1006   	; 0xca6 <__stack+0x1a7>
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     8be:	18 a6       	std	Y+40, r1	; 0x28
     8c0:	19 a6       	std	Y+41, r1	; 0x29
     8c2:	1a a6       	std	Y+42, r1	; 0x2a
     8c4:	1b a6       	std	Y+43, r1	; 0x2b
     8c6:	1c a6       	std	Y+44, r1	; 0x2c
     8c8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     8cc:	4d e0       	ldi	r20, 0x0D	; 13
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	be 01       	movw	r22, r28
     8d2:	60 5e       	subi	r22, 0xE0	; 224
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	85 e0       	ldi	r24, 0x05	; 5
     8d8:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     8dc:	e4 c1       	rjmp	.+968    	; 0xca6 <__stack+0x1a7>
     8de:	84 e3       	ldi	r24, 0x34	; 52
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     8ec:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     8f0:	4c e0       	ldi	r20, 0x0C	; 12
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e9       	ldi	r22, 0x90	; 144
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     8fe:	2c 89       	ldd	r18, Y+20	; 0x14
     900:	89 85       	ldd	r24, Y+9	; 0x09
     902:	9a 85       	ldd	r25, Y+10	; 0x0a
     904:	ab 85       	ldd	r26, Y+11	; 0x0b
     906:	bc 85       	ldd	r27, Y+12	; 0x0c
     908:	82 1b       	sub	r24, r18
     90a:	91 09       	sbc	r25, r1
     90c:	a1 09       	sbc	r26, r1
     90e:	b1 09       	sbc	r27, r1
     910:	88 a7       	std	Y+40, r24	; 0x28
     912:	99 a7       	std	Y+41, r25	; 0x29
     914:	aa a7       	std	Y+42, r26	; 0x2a
     916:	bb a7       	std	Y+43, r27	; 0x2b
     918:	1c a6       	std	Y+44, r1	; 0x2c
     91a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     91e:	4d e0       	ldi	r20, 0x0D	; 13
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	be 01       	movw	r22, r28
     924:	60 5e       	subi	r22, 0xE0	; 224
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     92e:	bb c1       	rjmp	.+886    	; 0xca6 <__stack+0x1a7>
     930:	89 e3       	ldi	r24, 0x39	; 57
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     93e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     942:	44 e0       	ldi	r20, 0x04	; 4
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     950:	2c 89       	ldd	r18, Y+20	; 0x14
     952:	89 85       	ldd	r24, Y+9	; 0x09
     954:	9a 85       	ldd	r25, Y+10	; 0x0a
     956:	ab 85       	ldd	r26, Y+11	; 0x0b
     958:	bc 85       	ldd	r27, Y+12	; 0x0c
     95a:	82 1b       	sub	r24, r18
     95c:	91 09       	sbc	r25, r1
     95e:	a1 09       	sbc	r26, r1
     960:	b1 09       	sbc	r27, r1
     962:	88 a7       	std	Y+40, r24	; 0x28
     964:	99 a7       	std	Y+41, r25	; 0x29
     966:	aa a7       	std	Y+42, r26	; 0x2a
     968:	bb a7       	std	Y+43, r27	; 0x2b
     96a:	1c a6       	std	Y+44, r1	; 0x2c
     96c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     970:	4d e0       	ldi	r20, 0x0D	; 13
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	be 01       	movw	r22, r28
     976:	60 5e       	subi	r22, 0xE0	; 224
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	85 e0       	ldi	r24, 0x05	; 5
     97c:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     980:	92 c1       	rjmp	.+804    	; 0xca6 <__stack+0x1a7>
     982:	8e e3       	ldi	r24, 0x3E	; 62
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	ab 85       	ldd	r26, Y+11	; 0x0b
     996:	bc 85       	ldd	r27, Y+12	; 0x0c
     998:	88 a7       	std	Y+40, r24	; 0x28
     99a:	99 a7       	std	Y+41, r25	; 0x29
     99c:	aa a7       	std	Y+42, r26	; 0x2a
     99e:	bb a7       	std	Y+43, r27	; 0x2b
     9a0:	1c a6       	std	Y+44, r1	; 0x2c
     9a2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     9a6:	4d e0       	ldi	r20, 0x0D	; 13
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	be 01       	movw	r22, r28
     9ac:	60 5e       	subi	r22, 0xE0	; 224
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	85 e0       	ldi	r24, 0x05	; 5
     9b2:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     9b6:	77 c1       	rjmp	.+750    	; 0xca6 <__stack+0x1a7>
     9b8:	83 e4       	ldi	r24, 0x43	; 67
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     9c6:	8c 88       	ldd	r8, Y+20	; 0x14
     9c8:	91 2c       	mov	r9, r1
     9ca:	98 2c       	mov	r9, r8
     9cc:	88 24       	eor	r8, r8
     9ce:	8d 89       	ldd	r24, Y+21	; 0x15
     9d0:	88 2a       	or	r8, r24
     9d2:	09 2c       	mov	r0, r9
     9d4:	00 0c       	add	r0, r0
     9d6:	aa 08       	sbc	r10, r10
     9d8:	bb 08       	sbc	r11, r11
     9da:	4f 88       	ldd	r4, Y+23	; 0x17
     9dc:	51 2c       	mov	r5, r1
     9de:	54 2c       	mov	r5, r4
     9e0:	44 24       	eor	r4, r4
     9e2:	88 8d       	ldd	r24, Y+24	; 0x18
     9e4:	48 2a       	or	r4, r24
     9e6:	14 14       	cp	r1, r4
     9e8:	15 04       	cpc	r1, r5
     9ea:	0c f0       	brlt	.+2      	; 0x9ee <_Z12SCSI_Executev+0x2d6>
     9ec:	4e c0       	rjmp	.+156    	; 0xa8a <_Z12SCSI_Executev+0x372>
     9ee:	05 2c       	mov	r0, r5
     9f0:	00 0c       	add	r0, r0
     9f2:	66 08       	sbc	r6, r6
     9f4:	77 08       	sbc	r7, r7
     9f6:	48 0c       	add	r4, r8
     9f8:	59 1c       	adc	r5, r9
     9fa:	6a 1c       	adc	r6, r10
     9fc:	7b 1c       	adc	r7, r11
     9fe:	7e 01       	movw	r14, r28
     a00:	f3 ed       	ldi	r31, 0xD3	; 211
     a02:	ef 1a       	sub	r14, r31
     a04:	fd ef       	ldi	r31, 0xFD	; 253
     a06:	ff 0a       	sbc	r15, r31
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	b5 01       	movw	r22, r10
     a0c:	a4 01       	movw	r20, r8
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
     a14:	81 11       	cpse	r24, r1
     a16:	47 c1       	rjmp	.+654    	; 0xca6 <__stack+0x1a7>
     a18:	2c 98       	cbi	0x05, 4	; 5
     a1a:	00 e0       	ldi	r16, 0x00	; 0
     a1c:	10 e1       	ldi	r17, 0x10	; 16
     a1e:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     a22:	8e 3f       	cpi	r24, 0xFE	; 254
     a24:	29 f0       	breq	.+10     	; 0xa30 <_Z12SCSI_Executev+0x318>
     a26:	01 50       	subi	r16, 0x01	; 1
     a28:	11 09       	sbc	r17, r1
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <_Z12SCSI_Executev+0x306>
     a2c:	2c 9a       	sbi	0x05, 4	; 5
     a2e:	3b c1       	rjmp	.+630    	; 0xca6 <__stack+0x1a7>
     a30:	6e 01       	movw	r12, r28
     a32:	2d e2       	ldi	r18, 0x2D	; 45
     a34:	c2 0e       	add	r12, r18
     a36:	d1 1c       	adc	r13, r1
     a38:	86 01       	movw	r16, r12
     a3a:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     a3e:	d8 01       	movw	r26, r16
     a40:	8d 93       	st	X+, r24
     a42:	8d 01       	movw	r16, r26
     a44:	ae 15       	cp	r26, r14
     a46:	bf 05       	cpc	r27, r15
     a48:	c1 f7       	brne	.-16     	; 0xa3a <_Z12SCSI_Executev+0x322>
     a4a:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     a4e:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     a52:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     a56:	2c 9a       	sbi	0x05, 4	; 5
     a58:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     a5c:	40 e4       	ldi	r20, 0x40	; 64
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	b6 01       	movw	r22, r12
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     a68:	b0 e4       	ldi	r27, 0x40	; 64
     a6a:	cb 0e       	add	r12, r27
     a6c:	d1 1c       	adc	r13, r1
     a6e:	ec 14       	cp	r14, r12
     a70:	fd 04       	cpc	r15, r13
     a72:	91 f7       	brne	.-28     	; 0xa58 <_Z12SCSI_Executev+0x340>
     a74:	ef ef       	ldi	r30, 0xFF	; 255
     a76:	8e 1a       	sub	r8, r30
     a78:	9e 0a       	sbc	r9, r30
     a7a:	ae 0a       	sbc	r10, r30
     a7c:	be 0a       	sbc	r11, r30
     a7e:	84 14       	cp	r8, r4
     a80:	95 04       	cpc	r9, r5
     a82:	a6 04       	cpc	r10, r6
     a84:	b7 04       	cpc	r11, r7
     a86:	09 f0       	breq	.+2      	; 0xa8a <_Z12SCSI_Executev+0x372>
     a88:	bf cf       	rjmp	.-130    	; 0xa08 <_Z12SCSI_Executev+0x2f0>
     a8a:	8a e3       	ldi	r24, 0x3A	; 58
     a8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     a90:	2c 89       	ldd	r18, Y+20	; 0x14
     a92:	89 85       	ldd	r24, Y+9	; 0x09
     a94:	9a 85       	ldd	r25, Y+10	; 0x0a
     a96:	ab 85       	ldd	r26, Y+11	; 0x0b
     a98:	bc 85       	ldd	r27, Y+12	; 0x0c
     a9a:	82 1b       	sub	r24, r18
     a9c:	91 09       	sbc	r25, r1
     a9e:	a1 09       	sbc	r26, r1
     aa0:	b1 09       	sbc	r27, r1
     aa2:	88 a7       	std	Y+40, r24	; 0x28
     aa4:	99 a7       	std	Y+41, r25	; 0x29
     aa6:	aa a7       	std	Y+42, r26	; 0x2a
     aa8:	bb a7       	std	Y+43, r27	; 0x2b
     aaa:	1c a6       	std	Y+44, r1	; 0x2c
     aac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     ab0:	4d e0       	ldi	r20, 0x0D	; 13
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	be 01       	movw	r22, r28
     ab6:	60 5e       	subi	r22, 0xE0	; 224
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     ac0:	88 e4       	ldi	r24, 0x48	; 72
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     ac8:	ee c0       	rjmp	.+476    	; 0xca6 <__stack+0x1a7>
     aca:	8d e4       	ldi	r24, 0x4D	; 77
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     ad8:	8c 88       	ldd	r8, Y+20	; 0x14
     ada:	91 2c       	mov	r9, r1
     adc:	98 2c       	mov	r9, r8
     ade:	88 24       	eor	r8, r8
     ae0:	8d 89       	ldd	r24, Y+21	; 0x15
     ae2:	88 2a       	or	r8, r24
     ae4:	09 2c       	mov	r0, r9
     ae6:	00 0c       	add	r0, r0
     ae8:	aa 08       	sbc	r10, r10
     aea:	bb 08       	sbc	r11, r11
     aec:	82 e5       	ldi	r24, 0x52	; 82
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     af4:	8e 01       	movw	r16, r28
     af6:	03 5d       	subi	r16, 0xD3	; 211
     af8:	1f 4f       	sbci	r17, 0xFF	; 255
     afa:	7e 01       	movw	r14, r28
     afc:	f3 ed       	ldi	r31, 0xD3	; 211
     afe:	ef 1a       	sub	r14, r31
     b00:	fd ef       	ldi	r31, 0xFD	; 253
     b02:	ff 0a       	sbc	r15, r31
     b04:	68 01       	movw	r12, r16
     b06:	88 e5       	ldi	r24, 0x58	; 88
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     b0e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z12WaitOutTokenv>
     b12:	60 e4       	ldi	r22, 0x40	; 64
     b14:	c6 01       	movw	r24, r12
     b16:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z8ReadDataPVcc>
     b1a:	8e e5       	ldi	r24, 0x5E	; 94
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     b22:	20 e4       	ldi	r18, 0x40	; 64
     b24:	c2 0e       	add	r12, r18
     b26:	d1 1c       	adc	r13, r1
     b28:	ec 14       	cp	r14, r12
     b2a:	fd 04       	cpc	r15, r13
     b2c:	61 f7       	brne	.-40     	; 0xb06 <__stack+0x7>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	b5 01       	movw	r22, r10
     b32:	a4 01       	movw	r20, r8
     b34:	88 e1       	ldi	r24, 0x18	; 24
     b36:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
     b3a:	88 23       	and	r24, r24
     b3c:	29 f0       	breq	.+10     	; 0xb48 <__stack+0x49>
     b3e:	84 e6       	ldi	r24, 0x64	; 100
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     b46:	af c0       	rjmp	.+350    	; 0xca6 <__stack+0x1a7>
     b48:	2c 98       	cbi	0x05, 4	; 5
     b4a:	8e ef       	ldi	r24, 0xFE	; 254
     b4c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     b50:	d8 01       	movw	r26, r16
     b52:	8d 91       	ld	r24, X+
     b54:	8d 01       	movw	r16, r26
     b56:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     b5a:	e0 16       	cp	r14, r16
     b5c:	f1 06       	cpc	r15, r17
     b5e:	c1 f7       	brne	.-16     	; 0xb50 <__stack+0x51>
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     b6c:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     b70:	8f 71       	andi	r24, 0x1F	; 31
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	31 f0       	breq	.+12     	; 0xb82 <__stack+0x83>
     b76:	2c 9a       	sbi	0x05, 4	; 5
     b78:	89 e6       	ldi	r24, 0x69	; 105
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     b80:	92 c0       	rjmp	.+292    	; 0xca6 <__stack+0x1a7>
     b82:	00 e0       	ldi	r16, 0x00	; 0
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     b8a:	81 11       	cpse	r24, r1
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__stack+0xa1>
     b8e:	0f 5f       	subi	r16, 0xFF	; 255
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	c9 f7       	brne	.-14     	; 0xb86 <__stack+0x87>
     b94:	2c 9a       	sbi	0x05, 4	; 5
     b96:	8e e6       	ldi	r24, 0x6E	; 110
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     b9e:	83 c0       	rjmp	.+262    	; 0xca6 <__stack+0x1a7>
     ba0:	2c 9a       	sbi	0x05, 4	; 5
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     ba8:	2c 98       	cbi	0x05, 4	; 5
     baa:	01 c0       	rjmp	.+2      	; 0xbae <__stack+0xaf>
     bac:	8c 01       	movw	r16, r24
     bae:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     bb2:	81 11       	cpse	r24, r1
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <__stack+0xcd>
     bb6:	c8 01       	movw	r24, r16
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0f 3f       	cpi	r16, 0xFF	; 255
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	b1 f7       	brne	.-20     	; 0xbac <__stack+0xad>
     bc0:	2c 9a       	sbi	0x05, 4	; 5
     bc2:	83 e7       	ldi	r24, 0x73	; 115
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     bca:	6d c0       	rjmp	.+218    	; 0xca6 <__stack+0x1a7>
     bcc:	2c 9a       	sbi	0x05, 4	; 5
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     bd4:	2c 89       	ldd	r18, Y+20	; 0x14
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	ab 85       	ldd	r26, Y+11	; 0x0b
     bdc:	bc 85       	ldd	r27, Y+12	; 0x0c
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	88 a7       	std	Y+40, r24	; 0x28
     be8:	99 a7       	std	Y+41, r25	; 0x29
     bea:	aa a7       	std	Y+42, r26	; 0x2a
     bec:	bb a7       	std	Y+43, r27	; 0x2b
     bee:	1c a6       	std	Y+44, r1	; 0x2c
     bf0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     bf4:	4d e0       	ldi	r20, 0x0D	; 13
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	be 01       	movw	r22, r28
     bfa:	60 5e       	subi	r22, 0xE0	; 224
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     c04:	88 e7       	ldi	r24, 0x78	; 120
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     c0c:	4c c0       	rjmp	.+152    	; 0xca6 <__stack+0x1a7>
     c0e:	8d e7       	ldi	r24, 0x7D	; 125
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     c1c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     c20:	42 e1       	ldi	r20, 0x12	; 18
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	6c e0       	ldi	r22, 0x0C	; 12
     c26:	71 e0       	ldi	r23, 0x01	; 1
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     c2e:	2c 89       	ldd	r18, Y+20	; 0x14
     c30:	89 85       	ldd	r24, Y+9	; 0x09
     c32:	9a 85       	ldd	r25, Y+10	; 0x0a
     c34:	ab 85       	ldd	r26, Y+11	; 0x0b
     c36:	bc 85       	ldd	r27, Y+12	; 0x0c
     c38:	82 1b       	sub	r24, r18
     c3a:	91 09       	sbc	r25, r1
     c3c:	a1 09       	sbc	r26, r1
     c3e:	b1 09       	sbc	r27, r1
     c40:	88 a7       	std	Y+40, r24	; 0x28
     c42:	99 a7       	std	Y+41, r25	; 0x29
     c44:	aa a7       	std	Y+42, r26	; 0x2a
     c46:	bb a7       	std	Y+43, r27	; 0x2b
     c48:	1c a6       	std	Y+44, r1	; 0x2c
     c4a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     c4e:	4d e0       	ldi	r20, 0x0D	; 13
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	be 01       	movw	r22, r28
     c54:	60 5e       	subi	r22, 0xE0	; 224
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     c5e:	23 c0       	rjmp	.+70     	; 0xca6 <__stack+0x1a7>
     c60:	82 e8       	ldi	r24, 0x82	; 130
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     c68:	89 85       	ldd	r24, Y+9	; 0x09
     c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6c:	ab 85       	ldd	r26, Y+11	; 0x0b
     c6e:	bc 85       	ldd	r27, Y+12	; 0x0c
     c70:	88 a7       	std	Y+40, r24	; 0x28
     c72:	99 a7       	std	Y+41, r25	; 0x29
     c74:	aa a7       	std	Y+42, r26	; 0x2a
     c76:	bb a7       	std	Y+43, r27	; 0x2b
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8c a7       	std	Y+44, r24	; 0x2c
     c7c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     c80:	4d e0       	ldi	r20, 0x0D	; 13
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	be 01       	movw	r22, r28
     c86:	60 5e       	subi	r22, 0xE0	; 224
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     c90:	1c a6       	std	Y+44, r1	; 0x2c
     c92:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     c96:	4d e0       	ldi	r20, 0x0D	; 13
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	be 01       	movw	r22, r28
     c9c:	60 5e       	subi	r22, 0xE0	; 224
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	85 e0       	ldi	r24, 0x05	; 5
     ca2:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     ca6:	c4 5d       	subi	r28, 0xD4	; 212
     ca8:	dd 4f       	sbci	r29, 0xFD	; 253
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	08 95       	ret

00000cd6 <__vector_11>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	28 97       	sbiw	r28, 0x08	; 8
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     d18:	82 ff       	sbrs	r24, 2
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <__vector_11+0x4c>
     d1c:	0e 94 8c 03 	call	0x718	; 0x718 <_Z12SCSI_Executev>
     d20:	a8 c0       	rjmp	.+336    	; 0xe72 <__vector_11+0x19c>
     d22:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     d26:	0e 94 06 01 	call	0x20c	; 0x20c <_Z22ReceivedSetupInterruptv>
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <__vector_11+0x5a>
     d2e:	a1 c0       	rjmp	.+322    	; 0xe72 <__vector_11+0x19c>
     d30:	68 e0       	ldi	r22, 0x08	; 8
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z8ReadDataPVcc>
     d3a:	82 ef       	ldi	r24, 0xF2	; 242
     d3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     d40:	19 81       	ldd	r17, Y+1	; 0x01
     d42:	11 23       	and	r17, r17
     d44:	1c f4       	brge	.+6      	; 0xd4c <__vector_11+0x76>
     d46:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z11WaitInTokenv>
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <__vector_11+0x7c>
     d4c:	8e ef       	ldi	r24, 0xFE	; 254
     d4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     d52:	81 2f       	mov	r24, r17
     d54:	80 76       	andi	r24, 0x60	; 96
     d56:	09 f0       	breq	.+2      	; 0xd5a <__vector_11+0x84>
     d58:	78 c0       	rjmp	.+240    	; 0xe4a <__vector_11+0x174>
     d5a:	4b 81       	ldd	r20, Y+3	; 0x03
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	84 2f       	mov	r24, r20
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	bc 01       	movw	r22, r24
     d64:	72 2b       	or	r23, r18
     d66:	ea 81       	ldd	r30, Y+2	; 0x02
     d68:	8e 2f       	mov	r24, r30
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	8a 30       	cpi	r24, 0x0A	; 10
     d6e:	91 05       	cpc	r25, r1
     d70:	08 f0       	brcs	.+2      	; 0xd74 <__vector_11+0x9e>
     d72:	75 c0       	rjmp	.+234    	; 0xe5e <__vector_11+0x188>
     d74:	fc 01       	movw	r30, r24
     d76:	ef 57       	subi	r30, 0x7F	; 127
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__tablejump2__>
     d7e:	10 38       	cpi	r17, 0x80	; 128
     d80:	39 f4       	brne	.+14     	; 0xd90 <__vector_11+0xba>
     d82:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZL9USB_STATE+0x3>
     d86:	e1 ef       	ldi	r30, 0xF1	; 241
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 83       	st	Z, r24
     d8c:	10 82       	st	Z, r1
     d8e:	68 c0       	rjmp	.+208    	; 0xe60 <__vector_11+0x18a>
     d90:	e1 ef       	ldi	r30, 0xF1	; 241
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
     d96:	10 82       	st	Z, r1
     d98:	63 c0       	rjmp	.+198    	; 0xe60 <__vector_11+0x18a>
     d9a:	11 11       	cpse	r17, r1
     d9c:	61 c0       	rjmp	.+194    	; 0xe60 <__vector_11+0x18a>
     d9e:	61 30       	cpi	r22, 0x01	; 1
     da0:	71 05       	cpc	r23, r1
     da2:	09 f0       	breq	.+2      	; 0xda6 <__vector_11+0xd0>
     da4:	5d c0       	rjmp	.+186    	; 0xe60 <__vector_11+0x18a>
     da6:	eb e1       	ldi	r30, 0x1B	; 27
     da8:	f3 e0       	ldi	r31, 0x03	; 3
     daa:	80 81       	ld	r24, Z
     dac:	8d 7f       	andi	r24, 0xFD	; 253
     dae:	80 83       	st	Z, r24
     db0:	57 c0       	rjmp	.+174    	; 0xe60 <__vector_11+0x18a>
     db2:	11 11       	cpse	r17, r1
     db4:	55 c0       	rjmp	.+170    	; 0xe60 <__vector_11+0x18a>
     db6:	61 30       	cpi	r22, 0x01	; 1
     db8:	71 05       	cpc	r23, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <__vector_11+0xe8>
     dbc:	51 c0       	rjmp	.+162    	; 0xe60 <__vector_11+0x18a>
     dbe:	eb e1       	ldi	r30, 0x1B	; 27
     dc0:	f3 e0       	ldi	r31, 0x03	; 3
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	80 83       	st	Z, r24
     dc8:	4b c0       	rjmp	.+150    	; 0xe60 <__vector_11+0x18a>
     dca:	e8 ee       	ldi	r30, 0xE8	; 232
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 ff       	sbrs	r24, 0
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <__vector_11+0xf8>
     dd4:	40 68       	ori	r20, 0x80	; 128
     dd6:	40 93 e3 00 	sts	0x00E3, r20	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
     dda:	42 c0       	rjmp	.+132    	; 0xe60 <__vector_11+0x18a>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z14SendDescriptorP8USBSetup>
     de4:	08 2f       	mov	r16, r24
     de6:	3c c0       	rjmp	.+120    	; 0xe60 <__vector_11+0x18a>
     de8:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZL9USB_STATE+0x2>
     dec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__vector_11+0x18a>
     df2:	1f 71       	andi	r17, 0x1F	; 31
     df4:	b9 f5       	brne	.+110    	; 0xe64 <__vector_11+0x18e>
     df6:	61 ec       	ldi	r22, 0xC1	; 193
     df8:	11 e0       	ldi	r17, 0x01	; 1
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f0 ef       	ldi	r31, 0xF0	; 240
     dfe:	ef 2e       	mov	r14, r31
     e00:	f1 2c       	mov	r15, r1
     e02:	f0 2d       	mov	r31, r0
     e04:	42 e3       	ldi	r20, 0x32	; 50
     e06:	81 2f       	mov	r24, r17
     e08:	0e 94 0c 01 	call	0x218	; 0x218 <_Z18InitializeEndpointccc>
     e0c:	88 23       	and	r24, r24
     e0e:	79 f0       	breq	.+30     	; 0xe2e <__vector_11+0x158>
     e10:	f7 01       	movw	r30, r14
     e12:	80 81       	ld	r24, Z
     e14:	84 60       	ori	r24, 0x04	; 4
     e16:	80 83       	st	Z, r24
     e18:	87 e8       	ldi	r24, 0x87	; 135
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     e20:	81 2f       	mov	r24, r17
     e22:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
     e26:	8a e8       	ldi	r24, 0x8A	; 138
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
     e2e:	1f 5f       	subi	r17, 0xFF	; 255
     e30:	e1 2f       	mov	r30, r17
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	e0 54       	subi	r30, 0x40	; 64
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	60 81       	ld	r22, Z
     e3a:	61 11       	cpse	r22, r1
     e3c:	e3 cf       	rjmp	.-58     	; 0xe04 <__vector_11+0x12e>
     e3e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <_ZL9USB_STATE+0x2>
     e48:	0b c0       	rjmp	.+22     	; 0xe60 <__vector_11+0x18a>
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	98 85       	ldd	r25, Y+8	; 0x08
     e4e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z19InitControlTransfers>
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	0e 94 82 02 	call	0x504	; 0x504 <_Z19ClassControlRequestP8USBSetup>
     e5a:	08 2f       	mov	r16, r24
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <__vector_11+0x18a>
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	01 11       	cpse	r16, r1
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <__vector_11+0x196>
     e64:	81 e2       	ldi	r24, 0x21	; 33
     e66:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <__vector_11+0x19c>
     e6c:	8e ef       	ldi	r24, 0xFE	; 254
     e6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     e72:	28 96       	adiw	r28, 0x08	; 8
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <_Z13CDC_Send_DataPKcs>:
     eac:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <_ZL12_usbLineInfo+0x7>
     eb0:	22 23       	and	r18, r18
     eb2:	29 f0       	breq	.+10     	; 0xebe <_Z13CDC_Send_DataPKcs+0x12>
     eb4:	ab 01       	movw	r20, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	0e 94 44 03 	call	0x688	; 0x688 <_Z7SendUsbcPKcs>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	08 95       	ret

00000ec2 <_GLOBAL__sub_I___vector_10>:

#define D_IAD(_firstInterface, _count, _class, _subClass, _protocol) \
{ 8, 11, _firstInterface, _count, _class, _subClass, _protocol, 0 }


volatile static struct{
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <_ZL9USB_STATE+0x2>
     ec8:	08 95       	ret

00000eca <main>:

extern char sd_buff[512];

int main(void)
{
	debug_master_init();
     eca:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_Z17debug_master_initv>
	debug_send("[AVRDBG]-");
     ece:	87 e8       	ldi	r24, 0x87	; 135
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
	debug_byte(0xEA);
     ed6:	8a ee       	ldi	r24, 0xEA	; 234
     ed8:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
	debug_send(";");
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>

	uchar status;
	sspi_init();
     ee4:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9sspi_initv>

	usb_core_init();
     ee8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z13usb_core_initv>

	status = sd_spi_driver_init();
     eec:	0e 94 03 08 	call	0x1006	; 0x1006 <_Z18sd_spi_driver_initv>
     ef0:	c8 2f       	mov	r28, r24
	debug_send("SDCARDS:");
     ef2:	81 e9       	ldi	r24, 0x91	; 145
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
	debug_byte(status);
     efa:	8c 2f       	mov	r24, r28
     efc:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
	debug_byte(status);
     f00:	8c 2f       	mov	r24, r28
     f02:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
	debug_send(";");
     f06:	88 e2       	ldi	r24, 0x28	; 40
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0e:	2f ef       	ldi	r18, 0xFF	; 255
     f10:	83 ed       	ldi	r24, 0xD3	; 211
     f12:	90 e3       	ldi	r25, 0x30	; 48
     f14:	21 50       	subi	r18, 0x01	; 1
     f16:	80 40       	sbci	r24, 0x00	; 0
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x4a>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x54>
     f1e:	00 00       	nop

    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(1000);
		CDC_Send_Data("HEllo World", 12);
     f20:	6c e0       	ldi	r22, 0x0C	; 12
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	8a e9       	ldi	r24, 0x9A	; 154
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	0e 94 56 07 	call	0xeac	; 0xeac <_Z13CDC_Send_DataPKcs>
     f2c:	f0 cf       	rjmp	.-32     	; 0xf0e <main+0x44>

00000f2e <_GLOBAL__sub_I_main>:
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZL9USB_STATE+0x2>
     f34:	08 95       	ret

00000f36 <_Z25sd_spi_driver_sendCommandhmb>:
	return SD_STATUS_SUCCESS;
}


uint8_t sd_spi_driver_sendCommand(uint8_t cmd, uint32_t arg, bool AutoDropCS)
{
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	18 2f       	mov	r17, r24
     f4a:	6a 01       	movw	r12, r20
     f4c:	7b 01       	movw	r14, r22
     f4e:	b2 2e       	mov	r11, r18
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

	if( ( 1 ) && 		
     f50:	8f ee       	ldi	r24, 0xEF	; 239
     f52:	81 0f       	add	r24, r17
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	40 f0       	brcs	.+16     	; 0xf68 <_Z25sd_spi_driver_sendCommandhmb+0x32>
	( cmd == READ_SINGLE_BLOCK     ||
      cmd == READ_MULTIPLE_BLOCKS  ||
     f58:	88 ee       	ldi	r24, 0xE8	; 232
     f5a:	81 0f       	add	r24, r17
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <_Z25sd_spi_driver_sendCommandhmb+0x32>
      cmd == WRITE_SINGLE_BLOCK    ||
      cmd == WRITE_MULTIPLE_BLOCKS ||
     f60:	80 ee       	ldi	r24, 0xE0	; 224
     f62:	81 0f       	add	r24, r17
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	48 f4       	brcc	.+18     	; 0xf7a <_Z25sd_spi_driver_sendCommandhmb+0x44>
      cmd == ERASE_BLOCK_START_ADDR|| 
      cmd == ERASE_BLOCK_END_ADDR ) 
	  )
	{
		arg = arg << 9;
     f68:	0b 2e       	mov	r0, r27
     f6a:	b9 e0       	ldi	r27, 0x09	; 9
     f6c:	cc 0c       	add	r12, r12
     f6e:	dd 1c       	adc	r13, r13
     f70:	ee 1c       	adc	r14, r14
     f72:	ff 1c       	adc	r15, r15
     f74:	ba 95       	dec	r27
     f76:	d1 f7       	brne	.-12     	; 0xf6c <_Z25sd_spi_driver_sendCommandhmb+0x36>
     f78:	b0 2d       	mov	r27, r0
	}	   


	SD_CS_ASSERT
     f7a:	2c 98       	cbi	0x05, 4	; 5
	
	// start bits [ 0 1 ] identify the package
	sspi_send(cmd | 0x40); 
     f7c:	81 2f       	mov	r24, r17
     f7e:	80 64       	ori	r24, 0x40	; 64
     f80:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	sspi_send(arg >> 24);
     f84:	8f 2d       	mov	r24, r15
     f86:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	sspi_send(arg >> 16);
     f8a:	8e 2d       	mov	r24, r14
     f8c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	sspi_send(arg >> 8);
     f90:	8d 2d       	mov	r24, r13
     f92:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	sspi_send(arg);
     f96:	8c 2d       	mov	r24, r12
     f98:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>

	// until we switched to spi mode, we must extract the CRC
	if(cmd == SEND_IF_COND)	 
     f9c:	18 30       	cpi	r17, 0x08	; 8
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <_Z25sd_spi_driver_sendCommandhmb+0x72>
		sspi_send(0x87);    
     fa0:	87 e8       	ldi	r24, 0x87	; 135
     fa2:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <_Z25sd_spi_driver_sendCommandhmb+0x78>
	else 
		sspi_send(0x95); 
     fa8:	85 e9       	ldi	r24, 0x95	; 149
     faa:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	return SD_STATUS_SUCCESS;
}


uint8_t sd_spi_driver_sendCommand(uint8_t cmd, uint32_t arg, bool AutoDropCS)
{
     fae:	c0 e0       	ldi	r28, 0x00	; 0
	if(cmd == SEND_IF_COND)	 
		sspi_send(0x87);    
	else 
		sspi_send(0x95); 

	while( (response = sspi_recv()) == 0xff ) 
     fb0:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     fb4:	d8 2f       	mov	r29, r24
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <_Z25sd_spi_driver_sendCommandhmb+0x8a>
     fba:	c1 50       	subi	r28, 0x01	; 1
		if(retry++ > 0xfe) return response; //time out error
     fbc:	c9 f7       	brne	.-14     	; 0xfb0 <_Z25sd_spi_driver_sendCommandhmb+0x7a>
     fbe:	18 c0       	rjmp	.+48     	; 0xff0 <_Z25sd_spi_driver_sendCommandhmb+0xba>

 
	if ( cmd == SEND_IF_COND ||
     fc0:	18 30       	cpi	r17, 0x08	; 8
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <_Z25sd_spi_driver_sendCommandhmb+0x92>
     fc4:	1a 33       	cpi	r17, 0x3A	; 58
     fc6:	81 f4       	brne	.+32     	; 0xfe8 <_Z25sd_spi_driver_sendCommandhmb+0xb2>
     fc8:	09 e2       	ldi	r16, 0x29	; 41
     fca:	13 e0       	ldi	r17, 0x03	; 3
     fcc:	0f 2e       	mov	r0, r31
     fce:	f5 e2       	ldi	r31, 0x25	; 37
     fd0:	ef 2e       	mov	r14, r31
     fd2:	f3 e0       	ldi	r31, 0x03	; 3
     fd4:	ff 2e       	mov	r15, r31
     fd6:	f0 2d       	mov	r31, r0
	     cmd == READ_OCR )		// R7 | R3
	{
		for (int8_t i = 3; i >= 0; --i)
			SDCARD_STATE.dwEResponse[i] = sspi_recv(); 
     fd8:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
     fdc:	f8 01       	movw	r30, r16
     fde:	82 93       	st	-Z, r24
     fe0:	8f 01       	movw	r16, r30

 
	if ( cmd == SEND_IF_COND ||
	     cmd == READ_OCR )		// R7 | R3
	{
		for (int8_t i = 3; i >= 0; --i)
     fe2:	ee 15       	cp	r30, r14
     fe4:	ff 05       	cpc	r31, r15
     fe6:	c1 f7       	brne	.-16     	; 0xfd8 <_Z25sd_spi_driver_sendCommandhmb+0xa2>
			SDCARD_STATE.dwEResponse[i] = sspi_recv(); 
	}
	//else if () // R2 ... [ TODO ]

	sspi_recv(); //extra 8 CLK
     fe8:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9sspi_recvv>
	
	// READ_SINGLE_BLOCK and WRITE_SINGLE_BLOCK commands should not clear this bit
	if ( AutoDropCS )
     fec:	b1 10       	cpse	r11, r1
		SD_CS_DEASSERT;
     fee:	2c 9a       	sbi	0x05, 4	; 5

	return response; //return state
}
     ff0:	8d 2f       	mov	r24, r29
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	08 95       	ret

00001006 <_Z18sd_spi_driver_initv>:
﻿#include "SDCard.h"



uint8_t sd_spi_driver_init()
{
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	89 ef       	ldi	r24, 0xF9	; 249
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <_Z18sd_spi_driver_initv+0x1a>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <_Z18sd_spi_driver_initv+0x20>
    1026:	00 00       	nop
	_delay_ms(1);
	
	SD_CS_DEASSERT
    1028:	2c 9a       	sbi	0x05, 4	; 5

	uint8_t i, status, SD_version;
    uint16_t retry = 0, retry2 = 0;
	
	SDCARD_STATE.bmFlags = 0x00;
    102a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZL12SDCARD_STATE>
    102e:	1a e0       	ldi	r17, 0x0A	; 10

	for( i = 0; i < 10; i++ )
		sspi_send(0xff);   // pause for sdcard initializing
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
    1036:	11 50       	subi	r17, 0x01	; 1
	uint8_t i, status, SD_version;
    uint16_t retry = 0, retry2 = 0;
	
	SDCARD_STATE.bmFlags = 0x00;

	for( i = 0; i < 10; i++ )
    1038:	d9 f7       	brne	.-10     	; 0x1030 <_Z18sd_spi_driver_initv+0x2a>
		sspi_send(0xff);   // pause for sdcard initializing

	SD_CS_ASSERT;
    103a:	2c 98       	cbi	0x05, 4	; 5
	
	do
	{
		// CMD0 - reset sdcard 
		status = sd_spi_driver_sendCommand(GO_IDLE_STATE, 0); 
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	ba 01       	movw	r22, r20
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    104a:	c0 e2       	ldi	r28, 0x20	; 32
    104c:	d0 e0       	ldi	r29, 0x00	; 0
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <_Z18sd_spi_driver_initv+0x5e>
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	ba 01       	movw	r22, r20
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    105e:	21 97       	sbiw	r28, 0x01	; 1
		retry++;
		
		if( retry > 0x20 )
    1060:	09 f4       	brne	.+2      	; 0x1064 <_Z18sd_spi_driver_initv+0x5e>
    1062:	8c c0       	rjmp	.+280    	; 0x117c <_Z18sd_spi_driver_initv+0x176>
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_NOT_DETECTED;   //card not detected
	
	} while( status != 0x01 );
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f7       	brne	.-24     	; 0x1050 <_Z18sd_spi_driver_initv+0x4a>
	
	
	sspi_send (0xff); //pause
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>
	sspi_send (0xff);
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9sspi_sendh>


	retry = 0;
	SDCARD_STATE.bVersion = SDCARD_V_SDHC; //default set to SD compliance with ver2.x;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_ZL12SDCARD_STATE+0x1>
    107a:	c0 e0       	ldi	r28, 0x00	; 0
    107c:	d1 e0       	ldi	r29, 0x01	; 1
	//this may change after checking the next command
	do
	{
		status = sd_spi_driver_sendCommand(SEND_IF_COND, 0x000001AA); //Check power supply status, mandatory for SDHC card
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	4a ea       	ldi	r20, 0xAA	; 170
    1082:	51 e0       	ldi	r21, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	88 e0       	ldi	r24, 0x08	; 8
    108a:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
		
		if ( status & 0x04 ) // illegal command
    108e:	82 ff       	sbrs	r24, 2
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <_Z18sd_spi_driver_initv+0x92>
		{
			// -> Ver1.X SD Memory Card
			SDCARD_STATE.bVersion = SDCARD_V_SDSC;
    1092:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZL12SDCARD_STATE+0x1>
			break;
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <_Z18sd_spi_driver_initv+0xa0>
    1098:	21 97       	sbiw	r28, 0x01	; 1
		}
		
		if( retry++ > 0xfe)
    109a:	19 f4       	brne	.+6      	; 0x10a2 <_Z18sd_spi_driver_initv+0x9c>
		{
			// time out -> Ver1.X SD Memory Card or Not SD Memory Card
			SDCARD_STATE.bVersion = SDCARD_V_SDSC;
    109c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZL12SDCARD_STATE+0x1>
			break;
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <_Z18sd_spi_driver_initv+0xa0>
		} 

	}while( status != 0x01 );
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	61 f7       	brne	.-40     	; 0x107e <_Z18sd_spi_driver_initv+0x78>
	sspi_send (0xff); //pause
	sspi_send (0xff);


	retry = 0;
	SDCARD_STATE.bVersion = SDCARD_V_SDHC; //default set to SD compliance with ver2.x;
    10a6:	ee 24       	eor	r14, r14
    10a8:	ea 94       	dec	r14
    10aa:	f1 2c       	mov	r15, r1
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CMD55;  //time out, card initialization failed

		}while( status != 0x01 );
		
		
		status = sd_spi_driver_sendCommand(SD_SEND_OP_COND, (SDCARD_STATE.bVersion == SDCARD_V_SDSC ? 0x00000000 : 0x40000000)); //ACMD41
    10ac:	0f 2e       	mov	r0, r31
    10ae:	f3 e2       	ldi	r31, 0x23	; 35
    10b0:	cf 2e       	mov	r12, r31
    10b2:	f3 e0       	ldi	r31, 0x03	; 3
    10b4:	df 2e       	mov	r13, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	91 2c       	mov	r9, r1
    10ba:	a1 2c       	mov	r10, r1
    10bc:	b1 2c       	mov	r11, r1
    10be:	00 e4       	ldi	r16, 0x40	; 64
	do
	{
		retry = 0;
		do
		{
			status = sd_spi_driver_sendCommand(APP_CMD, 0); //CMD55 - means the following command will be expanded, must be sent before sending any ACMD command
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	ba 01       	movw	r22, r20
    10c8:	87 e3       	ldi	r24, 0x37	; 55
    10ca:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    10ce:	ce ef       	ldi	r28, 0xFE	; 254
    10d0:	d0 e0       	ldi	r29, 0x00	; 0
    10d2:	0a c0       	rjmp	.+20     	; 0x10e8 <_Z18sd_spi_driver_initv+0xe2>
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	ba 01       	movw	r22, r20
    10dc:	87 e3       	ldi	r24, 0x37	; 55
    10de:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    10e2:	21 97       	sbiw	r28, 0x01	; 1
			
			if( retry++ > 0xfd )
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <_Z18sd_spi_driver_initv+0xe2>
    10e6:	4c c0       	rjmp	.+152    	; 0x1180 <_Z18sd_spi_driver_initv+0x17a>
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CMD55;  //time out, card initialization failed

		}while( status != 0x01 );
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	a1 f7       	brne	.-24     	; 0x10d4 <_Z18sd_spi_driver_initv+0xce>
		
		
		status = sd_spi_driver_sendCommand(SD_SEND_OP_COND, (SDCARD_STATE.bVersion == SDCARD_V_SDSC ? 0x00000000 : 0x40000000)); //ACMD41
    10ec:	f6 01       	movw	r30, r12
    10ee:	81 81       	ldd	r24, Z+1	; 0x01
    10f0:	88 23       	and	r24, r24
    10f2:	29 f0       	breq	.+10     	; 0x10fe <_Z18sd_spi_driver_initv+0xf8>
    10f4:	49 2d       	mov	r20, r9
    10f6:	5a 2d       	mov	r21, r10
    10f8:	6b 2d       	mov	r22, r11
    10fa:	70 2f       	mov	r23, r16
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <_Z18sd_spi_driver_initv+0x100>
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	89 e2       	ldi	r24, 0x29	; 41
    110a:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
		
		if ( status & 0x04 ) // illegal command
    110e:	82 ff       	sbrs	r24, 2
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <_Z18sd_spi_driver_initv+0x12c>
		{
			retry = 0;
			status = sd_spi_driver_sendCommand(SEND_OP_COND, 0x00000000); //CMD1
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	ba 01       	movw	r22, r20
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    1120:	2e ef       	ldi	r18, 0xFE	; 254
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	03 c0       	rjmp	.+6      	; 0x112c <_Z18sd_spi_driver_initv+0x126>
    1126:	21 50       	subi	r18, 0x01	; 1
    1128:	31 09       	sbc	r19, r1
			do 
			{
				if ( retry++ > 0xfd )
    112a:	61 f1       	breq	.+88     	; 0x1184 <_Z18sd_spi_driver_initv+0x17e>
					return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_INIT_TIME_OUT;  //time out, card initialization failed
					
			} while ( status != 0x00 );
    112c:	81 11       	cpse	r24, r1
    112e:	fb cf       	rjmp	.-10     	; 0x1126 <_Z18sd_spi_driver_initv+0x120>
    1130:	06 c0       	rjmp	.+12     	; 0x113e <_Z18sd_spi_driver_initv+0x138>
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	ef 1a       	sub	r14, r31
    1136:	f1 08       	sbc	r15, r1
			
			break;
		}
		
		if( retry2++ > 0xfd )
    1138:	39 f1       	breq	.+78     	; 0x1188 <_Z18sd_spi_driver_initv+0x182>
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_INIT_TIME_OUT;  //time out, card initialization failed
		
	}while( status != 0x00 ); //*
    113a:	81 11       	cpse	r24, r1
    113c:	c1 cf       	rjmp	.-126    	; 0x10c0 <_Z18sd_spi_driver_initv+0xba>


	retry = 0;

	if (SDCARD_STATE.bmFlags == SDCARD_V_SDHC)
    113e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZL12SDCARD_STATE>
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	a9 f4       	brne	.+42     	; 0x1170 <_Z18sd_spi_driver_initv+0x16a>
    1146:	22 c0       	rjmp	.+68     	; 0x118c <_Z18sd_spi_driver_initv+0x186>
	{
		do
		{
			status = sd_spi_driver_sendCommand(READ_OCR,0);
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	ba 01       	movw	r22, r20
    1150:	8a e3       	ldi	r24, 0x3A	; 58
    1152:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    1156:	21 97       	sbiw	r28, 0x01	; 1
			retry++;
			if(retry > 0xfe)	
    1158:	49 f0       	breq	.+18     	; 0x116c <_Z18sd_spi_driver_initv+0x166>
				break;
				
			if ( status == 0 )
    115a:	81 11       	cpse	r24, r1
    115c:	f5 cf       	rjmp	.-22     	; 0x1148 <_Z18sd_spi_driver_initv+0x142>
			{
				if ( !(SDCARD_STATE.dwEResponse[3] & 0x40) ) // SDHC 
    115e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZL12SDCARD_STATE+0x5>
    1162:	86 fd       	sbrc	r24, 6
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <_Z18sd_spi_driver_initv+0x16a>
					SDCARD_STATE.bVersion = SDCARD_V_SDSC;
    1166:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_ZL12SDCARD_STATE+0x1>
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <_Z18sd_spi_driver_initv+0x16a>
	}

	//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
	//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512

	if ( status == 0 )
    116c:	81 11       	cpse	r24, r1
    116e:	18 c0       	rjmp	.+48     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>
		SDCARD_STATE.bmFlags |= SDCARD_INIT_STATE;
    1170:	e3 e2       	ldi	r30, 0x23	; 35
    1172:	f3 e0       	ldi	r31, 0x03	; 3
    1174:	80 81       	ld	r24, Z
    1176:	80 68       	ori	r24, 0x80	; 128
    1178:	80 83       	st	Z, r24
    117a:	12 c0       	rjmp	.+36     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>
		// CMD0 - reset sdcard 
		status = sd_spi_driver_sendCommand(GO_IDLE_STATE, 0); 
		retry++;
		
		if( retry > 0x20 )
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_NOT_DETECTED;   //card not detected
    117c:	11 e8       	ldi	r17, 0x81	; 129
    117e:	10 c0       	rjmp	.+32     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>
		do
		{
			status = sd_spi_driver_sendCommand(APP_CMD, 0); //CMD55 - means the following command will be expanded, must be sent before sending any ACMD command
			
			if( retry++ > 0xfd )
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CMD55;  //time out, card initialization failed
    1180:	13 e8       	ldi	r17, 0x83	; 131
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>
			retry = 0;
			status = sd_spi_driver_sendCommand(SEND_OP_COND, 0x00000000); //CMD1
			do 
			{
				if ( retry++ > 0xfd )
					return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_INIT_TIME_OUT;  //time out, card initialization failed
    1184:	12 e8       	ldi	r17, 0x82	; 130
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>
			
			break;
		}
		
		if( retry2++ > 0xfd )
			return SD_STATUS_CARD_INIT_FAILED | SD_SUBSTATUS_CARD_INIT_TIME_OUT;  //time out, card initialization failed
    1188:	12 e8       	ldi	r17, 0x82	; 130
    118a:	0a c0       	rjmp	.+20     	; 0x11a0 <_Z18sd_spi_driver_initv+0x19a>

	if (SDCARD_STATE.bmFlags == SDCARD_V_SDHC)
	{
		do
		{
			status = sd_spi_driver_sendCommand(READ_OCR,0);
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	ba 01       	movw	r22, r20
    1194:	8a e3       	ldi	r24, 0x3A	; 58
    1196:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z25sd_spi_driver_sendCommandhmb>
    119a:	ce ef       	ldi	r28, 0xFE	; 254
    119c:	d0 e0       	ldi	r29, 0x00	; 0
    119e:	dd cf       	rjmp	.-70     	; 0x115a <_Z18sd_spi_driver_initv+0x154>

	if ( status == 0 )
		SDCARD_STATE.bmFlags |= SDCARD_INIT_STATE;

	return SD_STATUS_SUCCESS;
}
    11a0:	81 2f       	mov	r24, r17
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	08 95       	ret

000011ba <_Z17debug_master_initv>:
	debug_send("len[");
	debug_byte(wLength >> 8);
	debug_byte(wLength);
	debug_send("] )");

}
    11ba:	84 b1       	in	r24, 0x04	; 4
    11bc:	80 6e       	ori	r24, 0xE0	; 224
    11be:	84 b9       	out	0x04, r24	; 4
    11c0:	85 b1       	in	r24, 0x05	; 5
    11c2:	80 6a       	ori	r24, 0xA0	; 160
    11c4:	85 b9       	out	0x05, r24	; 5
    11c6:	2e 98       	cbi	0x05, 6	; 5
    11c8:	08 95       	ret

000011ca <_Z10debug_sendc>:
    11ca:	2f 98       	cbi	0x05, 7	; 5
    11cc:	98 e0       	ldi	r25, 0x08	; 8
    11ce:	88 23       	and	r24, r24
    11d0:	14 f4       	brge	.+4      	; 0x11d6 <_Z10debug_sendc+0xc>
    11d2:	2d 9a       	sbi	0x05, 5	; 5
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <_Z10debug_sendc+0xe>
    11d6:	2d 98       	cbi	0x05, 5	; 5
    11d8:	2e 9a       	sbi	0x05, 6	; 5
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	88 0f       	add	r24, r24
    11e0:	2e 98       	cbi	0x05, 6	; 5
    11e2:	00 00       	nop
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	99 f7       	brne	.-26     	; 0x11ce <_Z10debug_sendc+0x4>
    11e8:	00 00       	nop
    11ea:	85 b1       	in	r24, 0x05	; 5
    11ec:	80 6a       	ori	r24, 0xA0	; 160
    11ee:	85 b9       	out	0x05, r24	; 5
    11f0:	08 95       	ret

000011f2 <_Z10debug_sendPKc>:
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
    11fc:	8c 01       	movw	r16, r24
    11fe:	01 50       	subi	r16, 0x01	; 1
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	88 81       	ld	r24, Y
    1204:	88 23       	and	r24, r24
    1206:	31 f0       	breq	.+12     	; 0x1214 <_Z10debug_sendPKc+0x22>
    1208:	21 96       	adiw	r28, 0x01	; 1
    120a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_Z10debug_sendc>
    120e:	c0 17       	cp	r28, r16
    1210:	d1 07       	cpc	r29, r17
    1212:	b9 f7       	brne	.-18     	; 0x1202 <_Z10debug_sendPKc+0x10>
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <_Z10debug_byteh>:
    121e:	cf 93       	push	r28
    1220:	c8 2f       	mov	r28, r24
    1222:	e8 2f       	mov	r30, r24
    1224:	e2 95       	swap	r30
    1226:	ef 70       	andi	r30, 0x0F	; 15
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	ee 5f       	subi	r30, 0xFE	; 254
    122c:	fc 4f       	sbci	r31, 0xFC	; 252
    122e:	80 81       	ld	r24, Z
    1230:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_Z10debug_sendc>
    1234:	cf 70       	andi	r28, 0x0F	; 15
    1236:	ec 2f       	mov	r30, r28
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ee 5f       	subi	r30, 0xFE	; 254
    123c:	fc 4f       	sbci	r31, 0xFC	; 252
    123e:	80 81       	ld	r24, Z
    1240:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_Z10debug_sendc>
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <_Z19debug_usb_interrupth>:

void debug_usb_interrupt(uint8_t number)
{
    1248:	cf 93       	push	r28
    124a:	c8 2f       	mov	r28, r24
	debug_send("&I-USB[");
    124c:	87 ef       	ldi	r24, 0xF7	; 247
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
	debug_byte(number);
    1254:	8c 2f       	mov	r24, r28
    1256:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z10debug_byteh>
	debug_send("];");
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z10debug_sendPKc>
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <__tablejump2__>:
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	05 90       	lpm	r0, Z+
    126c:	f4 91       	lpm	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	09 94       	ijmp

00001272 <_exit>:
    1272:	f8 94       	cli

00001274 <__stop_program>:
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <__stop_program>
